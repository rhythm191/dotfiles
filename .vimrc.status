" setting status line

set laststatus=2

" lightline setting

" vim-gitgutter
let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '>'
let g:gitgutter_sign_removed = '-'

" lightline.vim
let g:lightline = {
      \ 'colorscheme': 'wombat',
	  \ 'active': {
	  \   'left': [ [ 'mode', 'paste' ],
	  \             [ 'readonly', 'filename' ],
	  \           ],
	  \   'right': [ [ 'lineinfo' ],
	  \              [ 'percent' ],
	  \              [ 'fugitive', 'fileformat', 'fileencoding', 'filetype' ],
	  \            ]
	  \ },
	  \ 'component_function': {
	  \   'readonly': 'MyReadonly',
      \   'filename': 'MyFilename',
	  \   'fugitive': 'MyFugitive',
      \ },
      \ }


function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'RO' : ''
endfunction

function! MyFilename()
  return (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head') && strlen(fugitive#head())
      return 'g) ' . fugitive#head()
    endif
  catch
  endtry
  return ''
endfunction